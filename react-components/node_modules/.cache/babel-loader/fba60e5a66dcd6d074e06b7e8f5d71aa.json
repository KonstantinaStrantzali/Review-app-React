{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/workspace/first-react-app/react-components/src/context/FeedbackContext.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useContext, useEffect } from 'react';\nimport RatingSelect from '../components/RatingSelect';\nimport Card from '../components/shared/Card';\nimport Button from '../components/shared/Button';\n\nfunction FeedbackForm() {\n  _s();\n\n  const [text, setText] = useState('');\n  const [rating, setRating] = useState(10);\n  const [btnDisabled, setBtnDisabled] = useState(true);\n  const [message, setMessage] = useState('');\n  const {\n    addFeedback,\n    feedbackEdit,\n    updateFeedback\n  } = useContext(FeedbackContext);\n  useEffect(() => {\n    if (feedbackEdit.edit === true) {\n      setBtnDisabled(false);\n      setText(feedbackEdit.item.text);\n      setRating(feedbackEdit.item.rating);\n    }\n  }, [feedbackEdit]); // NOTE: This should be checking input value not state as state won't be the updated value until the next render of the component\n  // prettier-ignore\n\n  const handleTextChange = ({\n    target: {\n      value\n    }\n  }) => {\n    // ðŸ‘ˆ  get the value\n    if (value === '') {\n      setBtnDisabled(true);\n      setMessage(null); // prettier-ignore\n    } else if (value.trim().length < 10) {\n      // ðŸ‘ˆ check for less than 10\n      setMessage('Text must be at least 10 characters');\n      setBtnDisabled(true);\n    } else {\n      setMessage(null);\n      setBtnDisabled(false);\n    }\n\n    setText(value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (text.trim().length > 10) {\n      const newFeedback = {\n        text,\n        rating\n      };\n\n      if (feedbackEdit.edit === true) {\n        updateFeedback(feedbackEdit.item.id, newFeedback);\n      } else {\n        addFeedback(newFeedback);\n      } // NOTE: reset to default state after submission\n\n\n      setBtnDisabled(true); // ðŸ‘ˆ  add this line to reset disabled\n\n      setRating(10); //ðŸ‘ˆ add this line to set rating back to 10\n\n      setText('');\n    }\n  }; // NOTE: pass selected to RatingSelect so we don't need local duplicate state\n\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"How would you rate your service with us?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RatingSelect, {\n        select: setRating,\n        selected: rating\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: handleTextChange,\n          type: \"text\",\n          placeholder: \"Write a review\",\n          value: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          isDisabled: btnDisabled,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FeedbackForm, \"X7ov4iexSyI6ctQX0WMH7Afwqj0=\");\n\n_c = FeedbackForm;\nexport default FeedbackForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"FeedbackForm\");","map":{"version":3,"sources":["/workspace/first-react-app/react-components/src/context/FeedbackContext.js"],"names":["useState","useContext","useEffect","RatingSelect","Card","Button","FeedbackForm","text","setText","rating","setRating","btnDisabled","setBtnDisabled","message","setMessage","addFeedback","feedbackEdit","updateFeedback","FeedbackContext","edit","item","handleTextChange","target","value","trim","length","handleSubmit","e","preventDefault","newFeedback","id"],"mappings":";;;;;AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,SAA/B,QAAgD,OAAhD;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,IAAP,MAAiB,2BAAjB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;;AAGA,SAASC,YAAT,GAAwB;AAAA;;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,EAAD,CAAtC;AAEA,QAAM;AAAEe,IAAAA,WAAF;AAAeC,IAAAA,YAAf;AAA6BC,IAAAA;AAA7B,MACJhB,UAAU,CAACiB,eAAD,CADZ;AAGAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,YAAY,CAACG,IAAb,KAAsB,IAA1B,EAAgC;AAC9BP,MAAAA,cAAc,CAAC,KAAD,CAAd;AACAJ,MAAAA,OAAO,CAACQ,YAAY,CAACI,IAAb,CAAkBb,IAAnB,CAAP;AACAG,MAAAA,SAAS,CAACM,YAAY,CAACI,IAAb,CAAkBX,MAAnB,CAAT;AACD;AACF,GANQ,EAMN,CAACO,YAAD,CANM,CAAT,CATsB,CAiBtB;AAEA;;AACA,QAAMK,gBAAgB,GAAG,CAAC;AAAEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA;AAAF;AAAV,GAAD,KAA2B;AAAE;AACpD,QAAIA,KAAK,KAAK,EAAd,EAAkB;AAChBX,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAE,MAAAA,UAAU,CAAC,IAAD,CAAV,CAFgB,CAIpB;AACG,KALD,MAKO,IAAIS,KAAK,CAACC,IAAN,GAAaC,MAAb,GAAsB,EAA1B,EAA8B;AAAE;AACrCX,MAAAA,UAAU,CAAC,qCAAD,CAAV;AACAF,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD,KAHM,MAGA;AACLE,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,MAAAA,cAAc,CAAC,KAAD,CAAd;AACD;;AACDJ,IAAAA,OAAO,CAACe,KAAD,CAAP;AACD,GAdD;;AAgBA,QAAMG,YAAY,GAAIC,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAIrB,IAAI,CAACiB,IAAL,GAAYC,MAAZ,GAAqB,EAAzB,EAA6B;AAC3B,YAAMI,WAAW,GAAG;AAClBtB,QAAAA,IADkB;AAElBE,QAAAA;AAFkB,OAApB;;AAKA,UAAIO,YAAY,CAACG,IAAb,KAAsB,IAA1B,EAAgC;AAC9BF,QAAAA,cAAc,CAACD,YAAY,CAACI,IAAb,CAAkBU,EAAnB,EAAuBD,WAAvB,CAAd;AACD,OAFD,MAEO;AACLd,QAAAA,WAAW,CAACc,WAAD,CAAX;AACD,OAV0B,CAY3B;;;AACAjB,MAAAA,cAAc,CAAC,IAAD,CAAd,CAb2B,CAaN;;AACrBF,MAAAA,SAAS,CAAC,EAAD,CAAT,CAd2B,CAcb;;AACdF,MAAAA,OAAO,CAAC,EAAD,CAAP;AACD;AACF,GAnBD,CApCsB,CAyDtB;;;AACA,sBACE,QAAC,IAAD;AAAA,2BACE;AAAM,MAAA,QAAQ,EAAEkB,YAAhB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,YAAD;AAAc,QAAA,MAAM,EAAEhB,SAAtB;AAAiC,QAAA,QAAQ,EAAED;AAA3C;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,gCACE;AACE,UAAA,QAAQ,EAAEY,gBADZ;AAEE,UAAA,IAAI,EAAC,MAFP;AAGE,UAAA,WAAW,EAAC,gBAHd;AAIE,UAAA,KAAK,EAAEd;AAJT;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,UAAU,EAAEI,WAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,EAeGE,OAAO,iBAAI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,kBAA0BA;AAA1B;AAAA;AAAA;AAAA;AAAA,cAfd;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GA/EQP,Y;;KAAAA,Y;AAiFT,eAAeA,YAAf","sourcesContent":["import { useState, useContext, useEffect } from 'react'\nimport RatingSelect from '../components/RatingSelect'\nimport Card from '../components/shared/Card'\nimport Button from '../components/shared/Button'\n\n\nfunction FeedbackForm() {\n  const [text, setText] = useState('')\n  const [rating, setRating] = useState(10)\n  const [btnDisabled, setBtnDisabled] = useState(true)\n  const [message, setMessage] = useState('')\n\n  const { addFeedback, feedbackEdit, updateFeedback } =\n    useContext(FeedbackContext)\n\n  useEffect(() => {\n    if (feedbackEdit.edit === true) {\n      setBtnDisabled(false)\n      setText(feedbackEdit.item.text)\n      setRating(feedbackEdit.item.rating)\n    }\n  }, [feedbackEdit])\n\n  // NOTE: This should be checking input value not state as state won't be the updated value until the next render of the component\n\n  // prettier-ignore\n  const handleTextChange = ({ target: { value } }) => { // ðŸ‘ˆ  get the value\n    if (value === '') {\n      setBtnDisabled(true)\n      setMessage(null)\n      \n  // prettier-ignore\n    } else if (value.trim().length < 10) { // ðŸ‘ˆ check for less than 10\n      setMessage('Text must be at least 10 characters')\n      setBtnDisabled(true)\n    } else {\n      setMessage(null)\n      setBtnDisabled(false)\n    }\n    setText(value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if (text.trim().length > 10) {\n      const newFeedback = {\n        text,\n        rating,\n      }\n\n      if (feedbackEdit.edit === true) {\n        updateFeedback(feedbackEdit.item.id, newFeedback)\n      } else {\n        addFeedback(newFeedback)\n      }\n\n      // NOTE: reset to default state after submission\n      setBtnDisabled(true) // ðŸ‘ˆ  add this line to reset disabled\n      setRating(10) //ðŸ‘ˆ add this line to set rating back to 10\n      setText('')\n    }\n  }\n\n  // NOTE: pass selected to RatingSelect so we don't need local duplicate state\n  return (\n    <Card>\n      <form onSubmit={handleSubmit}>\n        <h2>How would you rate your service with us?</h2>\n        <RatingSelect select={setRating} selected={rating} />\n        <div className='input-group'>\n          <input\n            onChange={handleTextChange}\n            type='text'\n            placeholder='Write a review'\n            value={text}\n          />\n          <Button type='submit' isDisabled={btnDisabled}>\n            Send\n          </Button>\n        </div>\n\n        {message && <div className='message'>{message}</div>}\n      </form>\n    </Card>\n  )\n}\n\nexport default FeedbackForm"]},"metadata":{},"sourceType":"module"}