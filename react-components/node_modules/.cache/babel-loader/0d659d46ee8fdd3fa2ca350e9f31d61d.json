{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/workspace/first-react-app/react-components/src/components/RatingSelect.js\";\n\nfunction RatingSelect({\n  select,\n  selected\n}) {\n  // NOTE: We don't need local state here as it's a duplicate of parent state\n  // also no real need for useEffect or context\n  // useEffect(() => {\n  //   select(feedbackEdit.item.rating)\n  // }, [feedbackEdit])\n  const handleChange = e => {\n    select(+e.currentTarget.value);\n  }; // NOTE: simplified with iteration\n\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"rating\",\n    children: Array.from({\n      length: 10\n    }, (_, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        id: `num${i + 1}`,\n        name: \"rating\",\n        value: i + 1,\n        onChange: handleChange,\n        checked: selected === i + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: `num${i + 1}`,\n        children: i + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this)]\n    }, `rating-${i + 1}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n\n_c = RatingSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"RatingSelect\");","map":{"version":3,"sources":["/workspace/first-react-app/react-components/src/components/RatingSelect.js"],"names":["RatingSelect","select","selected","handleChange","e","currentTarget","value","Array","from","length","_","i"],"mappings":";;;AAAA,SAASA,YAAT,CAAsB;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAtB,EAA4C;AAC1C;AACA;AACA;AACA;AACA;AAEA,QAAMC,YAAY,GAAIC,CAAD,IAAO;AAC1BH,IAAAA,MAAM,CAAC,CAACG,CAAC,CAACC,aAAF,CAAgBC,KAAlB,CAAN;AACD,GAFD,CAP0C,CAW1C;;;AACA,sBACE;AAAI,IAAA,SAAS,EAAC,QAAd;AAAA,cACGC,KAAK,CAACC,IAAN,CAAW;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAX,EAA2B,CAACC,CAAD,EAAIC,CAAJ,kBAC1B;AAAA,8BACE;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,EAAE,EAAG,MAAKA,CAAC,GAAG,CAAE,EAFlB;AAGE,QAAA,IAAI,EAAC,QAHP;AAIE,QAAA,KAAK,EAAEA,CAAC,GAAG,CAJb;AAKE,QAAA,QAAQ,EAAER,YALZ;AAME,QAAA,OAAO,EAAED,QAAQ,KAAKS,CAAC,GAAG;AAN5B;AAAA;AAAA;AAAA;AAAA,cADF,eASE;AAAO,QAAA,OAAO,EAAG,MAAKA,CAAC,GAAG,CAAE,EAA5B;AAAA,kBAAgCA,CAAC,GAAG;AAApC;AAAA;AAAA;AAAA;AAAA,cATF;AAAA,OAAU,UAASA,CAAC,GAAG,CAAE,EAAzB;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;KA7BQX,Y","sourcesContent":["function RatingSelect({ select, selected }) {\n  // NOTE: We don't need local state here as it's a duplicate of parent state\n  // also no real need for useEffect or context\n  // useEffect(() => {\n  //   select(feedbackEdit.item.rating)\n  // }, [feedbackEdit])\n\n  const handleChange = (e) => {\n    select(+e.currentTarget.value)\n  }\n\n  // NOTE: simplified with iteration\n  return (\n    <ul className='rating'>\n      {Array.from({ length: 10 }, (_, i) => (\n        <li key={`rating-${i + 1}`}>\n          <input\n            type='radio'\n            id={`num${i + 1}`}\n            name='rating'\n            value={i + 1}\n            onChange={handleChange}\n            checked={selected === i + 1}\n          />\n          <label htmlFor={`num${i + 1}`}>{i + 1}</label>\n        </li>\n      ))}\n    </ul>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}